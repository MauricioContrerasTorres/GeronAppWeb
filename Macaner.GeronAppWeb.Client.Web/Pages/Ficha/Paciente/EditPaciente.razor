@page "/Ficha/Paciente/EditPaciente/{IdPaciente:int}";
@using Blazored.Typeahead
@using Macaner.GeronAppWeb.Client.Web.Models;
@using Macaner.GeronAppWeb.Service.Interface;
@using Macaner.GeronAppWeb.Shared.DTO;
@using Macaner.GeronAppWeb.Shared.Interface;

@inject IPacienteService _pacienteService;
@inject IComunaService _comunaService;
@inject IMedicamentoService _medicamentoService;
@inject IAlergiaService _alergiaService;
@inject ISexoService _sexoService;
@inject NavigationManager navigationManager;
@inject IJSRuntime jsRuntime;
@inject IHelper _helper;


<h3>Editar Paciente</h3>

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-7">
                <h4 class="card-title text-dark">Editar Paciente</h4>
            </div>
        </div>
    </div>
    <div class="card-body">
        @if (pacienteModel == null)
        {
            <p>Cargando</p>
        }
        else
        {
            <EditForm Model="pacienteModel" OnValidSubmit="@(()=> Edit())">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <ValidationSummary></ValidationSummary>
                <div class="container">
                    <div class="form-group">
                        <div class="row">
                            <div class="col-2">
                                <label>Foto Paciente: </label>
                            </div>
                            <div class="col-2">
                                <video id="video" autoplay playsinline style="width: 100%; max-width: 200px;"></video>
                                <canvas id="canvas" style="display: none;width: 100%; max-width: 200px;"></canvas>
                            </div>
                            <div class="col-2 d-flex flex-column gap-1">
                                <button type="button" @onclick="IniciarCamara" class="btn btn-primary">Iniciar</button>
                                <button type="button" @onclick="CapturarFoto" class="btn btn-success" disabled="@isDisabledBtn_CapturarFoto">Capturar</button>
                                <ValidationMessage For="()=>pacienteModel.Foto"></ValidationMessage>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-2">
                                <label>RUT Paciente: </label>
                            </div>
                            <div class="col-5">
                                <InputText @bind-Value="pacienteModel.RUT" class="form-control" placeholder="Ingresa el RUT del paciente"></InputText>
                                <ValidationMessage For="()=>pacienteModel.RUT"></ValidationMessage>
                            </div>
                            <div class="col-1">
                                <InputText @bind-Value="pacienteModel.DV" class="form-control" placeholder="Ingresa el DV del paciente" maxlenght="1"></InputText>
                                <ValidationMessage For="()=>pacienteModel.DV"></ValidationMessage>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-2">
                                <label>Nombre: </label>
                            </div>
                            <div class="col-6">
                                <InputText @bind-Value="pacienteModel.Nombre" class="form-control" placeholder="Ingresa el nombre de la paciente"></InputText>
                                <ValidationMessage For="()=>pacienteModel.Nombre"></ValidationMessage>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-2">
                                <label>Apellido Paterno: </label>
                            </div>
                            <div class="col-6">
                                <InputText @bind-Value="pacienteModel.ApellidoPaterno" class="form-control" placeholder="Ingresa el apellido paterno del paciente"></InputText>
                                <ValidationMessage For="()=>pacienteModel.ApellidoPaterno"></ValidationMessage>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-2">
                                <label>Apellido Materno: </label>
                            </div>
                            <div class="col-6">
                                <InputText @bind-Value="pacienteModel.ApellidoMaterno" class="form-control" placeholder="Ingresa el apellido materno del paciente"></InputText>
                                <ValidationMessage For="()=>pacienteModel.ApellidoMaterno"></ValidationMessage>
                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="col-2">
                                <label>Género: </label>
                            </div>
                            <div class="col-6">
                                <BlazoredTypeahead SearchMethod="SearchItemsSexo" @bind-Value="selectedSexo" Context="item" ShowDropDownOnFocus="true" Placeholder="Seleccione un Género">
                                    <SelectedTemplate>
                                        @item.Descripcion
                                    </SelectedTemplate>
                                    <ResultTemplate>
                                        @item.Descripcion (@item.Id)
                                    </ResultTemplate>
                                </BlazoredTypeahead>

                                <ValidationMessage For="()=>pacienteModel.IdSexo"></ValidationMessage>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-2">
                                <label>Fecha Nacimiento: </label>
                            </div>
                            <div class="col-6">
                                <InputDate @bind-Value="pacienteModel.FechaNacimiento" class="form-control" placeholder="Ingresa la fecha de nacimiento del paciente"></InputDate>
                                <ValidationMessage For="()=>pacienteModel.FechaNacimiento"></ValidationMessage>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-2">
                                <label>Edad: </label>
                            </div>
                            <div class="col-6">
                                <InputNumber @bind-Value="pacienteModel.Edad" class="form-control" placeholder="Ingresa la edad del paciente"></InputNumber>
                                <ValidationMessage For="()=>pacienteModel.Edad"></ValidationMessage>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-2">
                                <label>Dirección: </label>
                            </div>
                            <div class="col-6">
                                <InputText @bind-Value="pacienteModel.Direccion" class="form-control" placeholder="Ingresa la dirección del paciente"></InputText>
                                <ValidationMessage For="()=>pacienteModel.Direccion"></ValidationMessage>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-2">
                                <label>Comuna: </label>
                            </div>
                            <div class="col-6">
                                <BlazoredTypeahead SearchMethod="SearchItemsComuna" @bind-Value="selectedComuna" Context="item" ShowDropDownOnFocus="true" Placeholder="Seleccione una comuna">
                                    <SelectedTemplate>
                                        @item.Descripcion
                                    </SelectedTemplate>
                                    <ResultTemplate>
                                        @item.Descripcion (@item.Id)
                                    </ResultTemplate>
                                </BlazoredTypeahead>

                                <ValidationMessage For="()=>pacienteModel.IdComuna"></ValidationMessage>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-2">
                                <label>Telefono Contacto Principal: </label>
                            </div>
                            <div class="col-6">
                                <InputText @bind-Value="pacienteModel.TelefonoContactoPrincipal" class="form-control" placeholder="Ingresa teléfono contacto principal del paciente"></InputText>
                                <ValidationMessage For="()=>pacienteModel.TelefonoContactoPrincipal"></ValidationMessage>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-2">
                                <label>Telefono Contacto Secundario: </label>
                            </div>
                            <div class="col-6">
                                <InputText @bind-Value="pacienteModel.TelefonoContactoSecundario" class="form-control" placeholder="Ingresa teléfono contacto secundario del paciente"></InputText>
                                <ValidationMessage For="()=>pacienteModel.TelefonoContactoSecundario"></ValidationMessage>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-2">
                                <label>Email Contacto Principal: </label>
                            </div>
                            <div class="col-6">
                                <InputText @bind-Value="pacienteModel.EmailContactoPrincipal" class="form-control" placeholder="Ingresa email contacto pricipal del paciente"></InputText>
                                <ValidationMessage For="()=>pacienteModel.EmailContactoPrincipal"></ValidationMessage>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-2">
                                <label>Email Contacto Secundario: </label>
                            </div>
                            <div class="col-6">
                                <InputText @bind-Value="pacienteModel.EmailContactoSecundario" class="form-control" placeholder="Ingresa email contacto secundario del paciente"></InputText>
                                <ValidationMessage For="()=>pacienteModel.EmailContactoSecundario"></ValidationMessage>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-2">
                                <label>Fecha Ingreso: </label>
                            </div>
                            <div class="col-6">
                                <InputDate @bind-Value="pacienteModel.FechaIngreso" class="form-control" placeholder="Ingresa la fecha de ingreso del paciente"></InputDate>
                                <ValidationMessage For="()=>pacienteModel.FechaIngreso"></ValidationMessage>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-2">
                                <label>Medicamentos Alergicos: </label>
                            </div>
                            <div class="col-6">
                                <BlazoredTypeahead SearchMethod="SearchItemsMedicamentos" @bind-Value="selectedMedicamento" Context="item" ShowDropDownOnFocus="true" Placeholder="Seleccione un medicamento">
                                    <SelectedTemplate>
                                        @item.Descripcion
                                    </SelectedTemplate>
                                    <ResultTemplate>
                                        @item.Descripcion (@item.Id)
                                    </ResultTemplate>
                                </BlazoredTypeahead>
                            </div>
                            <div class="col-2">
                                <button type="button" class="btn btn-primary" @onclick="AgregarMedicamento">Agregar</button>
                            </div>
                        </div>

                        <br />

                        <div class="row">
                            <div class="col-2">
                                <label>Seleccionados: </label>
                            </div>
                            <div class="col-6">
                                <ul>
                                    @foreach (var medicamento in pacienteModel.ListaMedicamentosAlergicosSeleccionados)
                                    {
                                        <li>
                                            @medicamento.Descripcion
                                            <button type="button" class="btn btn-danger btn-sm" @onclick="() => EliminarMedicamento(medicamento)">X</button>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-2">
                                <label>Alergias: </label>
                            </div>
                            <div class="col-6">
                                <BlazoredTypeahead SearchMethod="SearchItemsAlergias" @bind-Value="selectedAlergia" Context="item" ShowDropDownOnFocus="true" Placeholder="Seleccione una Alergia">
                                    <SelectedTemplate>
                                        @item.Descripcion
                                    </SelectedTemplate>
                                    <ResultTemplate>
                                        @item.Descripcion (@item.Id)
                                    </ResultTemplate>
                                </BlazoredTypeahead>

                                @*  <ValidationMessage For="()=>pacienteModel.IdAlergia"></ValidationMessage> *@
                            </div>
                            <div class="col-2">
                                <button type="button" class="btn btn-primary" @onclick="AgregarAlergia">Agregar</button>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-2">
                                <label>Seleccionados: </label>
                            </div>
                            <div class="col-6">
                                <ul>
                                    @foreach (var alergia in pacienteModel.ListaAlergiasSeleccionadas)
                                    {
                                        <li>
                                            @alergia.Descripcion
                                            <button type="button" class="btn btn-danger btn-sm" @onclick="() => EliminarAlergia(alergia)">X</button>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-2">
                                <button type="submit" class="btn btn-success"><i class="bi bi-gear-fill"></i>&nbsp;Guardar</button>
                            </div>
                            <div class="col-6">
                                <NavLink href="/Ficha/Paciente/IndexPaciente" class="btn btn-secondary"><i class="bi bi-arrow-left-circle-fill"></i>&nbsp;Volver Atrás</NavLink>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        }


    </div>

</div>


<AlertConfirm CambioConfirmacion="Click_ConfirmarCreacion" mensaje="@mensaje"></AlertConfirm>


@code {

    [Parameter]
    public int? IdPaciente { get; set; }

    private PacienteViewModel pacienteModel;
    private DropDownDTO selectedMedicamento;
    private DropDownDTO selectedAlergia;
    private DropDownDTO selectedComuna;
    private DropDownDTO selectedSexo;

    private bool isDisabledBtn_CapturarFoto = true;

    private string mensaje { get; set; }

    protected async Task Edit()
    {
        if (pacienteModel.Foto == null)
        {
            await jsRuntime.InvokeVoidAsync("ShowWarningAlert", "Falta capturar la foto");
            return;
        }
        mensaje = "¿Está seguro de guardar los datos del paciente?";
        await jsRuntime.InvokeVoidAsync("ShowAlertConfirm");
    }

    protected override async Task OnInitializedAsync()
    {
        
        //await jsRuntime.InvokeVoidAsync("$('#btn_CapturarFoto').prop('disabled',true)");
        pacienteModel = new PacienteViewModel(_comunaService, _medicamentoService, _alergiaService, _sexoService);
        await pacienteModel.InitializeAsync();

        var respuesta =  await _pacienteService.GetAsync(IdPaciente.Value);
        if (respuesta.IsSuccess){
            var pacienteDTO = respuesta.Data;

            pacienteModel.ApellidoMaterno = pacienteDTO.ApellidoMaterno;
            pacienteModel.ApellidoPaterno = pacienteDTO.ApellidoPaterno;
            pacienteModel.Direccion = pacienteDTO.Direccion;
            pacienteModel.DV = pacienteDTO.DV;
            pacienteModel.Edad = pacienteDTO.Edad;
            pacienteModel.EmailContactoPrincipal = pacienteDTO.EmailContactoPrincipal;
            pacienteModel.EmailContactoSecundario = pacienteDTO.EmailContactoSecundario;
            pacienteModel.FechaIngreso = pacienteDTO.FechaIngreso;
            pacienteModel.FechaNacimiento = pacienteDTO.FechaNacimiento;
            //pacienteModel.Foto = pacienteDTO.Foto;
            pacienteModel.IdComuna = pacienteDTO.IdComuna;
            pacienteModel.IdSexo = pacienteDTO.IdSexo;
            pacienteModel.Nombre = pacienteDTO.Nombre;
            pacienteModel.RUT = pacienteDTO.RUT.ToString();
            pacienteModel.TelefonoContactoPrincipal = pacienteDTO.TelefonoContactoPrincipal;
            pacienteModel.TelefonoContactoSecundario = pacienteDTO.TelefonoContactoSecundario;
            selectedComuna = pacienteModel.ListaComunas.FirstOrDefault(x => x.Id == pacienteDTO.IdComuna);
            selectedSexo = pacienteModel.ListaSexo.FirstOrDefault(x => x.Id == pacienteDTO.IdSexo);

            await ProcesarAlergiasMedicamentosPaciente(IdPaciente.Value);
            await ProcesarAlergiasPaciente(IdPaciente.Value);
            if (pacienteDTO.FotoArchivo != null) await MostrarFotoPaciente(pacienteDTO.FotoArchivo);

        }        
    }

    protected async Task MostrarFotoPaciente(byte[] foto){        
        string base64Image = $"data:image/png;base64,{Convert.ToBase64String(foto)}";
        pacienteModel.Foto = base64Image;
        await jsRuntime.InvokeVoidAsync("drawImageOnCanvas", "canvas", base64Image);

    }

    protected async Task ProcesarAlergiasPaciente(int idPaciente){

        var respuesta = await _pacienteService.GetAlergiasAsync(idPaciente);
        var listaAlergiasPaciente = respuesta.Data;

        pacienteModel.ListaAlergiasSeleccionadas = pacienteModel.ListaAlergias.Where(x => listaAlergiasPaciente.Select(t => t.IdAlergia).Contains(x.Id)).ToList();
        pacienteModel.ListaAlergias = pacienteModel.ListaAlergias.Where(x => !listaAlergiasPaciente.Select(t => t.IdAlergia).Contains(x.Id)).ToList();

    }

    protected async Task ProcesarAlergiasMedicamentosPaciente(int idPaciente)
    {

        var respuesta = await _pacienteService.GeAlergiasMedicamentosPacientesAsync(idPaciente);
        var listaAlergiasPaciente = respuesta.Data;

        pacienteModel.ListaMedicamentosAlergicosSeleccionados = pacienteModel.ListaMedicamentosAlergicos.Where(x => listaAlergiasPaciente.Select(t => t.IdMedicamento).Contains(x.Id)).ToList();
        pacienteModel.ListaMedicamentosAlergicos = pacienteModel.ListaMedicamentosAlergicos.Where(x => !listaAlergiasPaciente.Select(t => t.IdMedicamento).Contains(x.Id)).ToList();

    }

    protected async Task Click_ConfirmarCreacion(bool respuesta)
    {

        if (respuesta)
        {      
            PacienteDTO _pacienteDTO = new PacienteDTO();            
            _pacienteDTO.IdPaciente = IdPaciente.Value;
            _pacienteDTO.RUT = Convert.ToInt32(pacienteModel.RUT);
            _pacienteDTO.DV = pacienteModel.DV;
            _pacienteDTO.Nombre = pacienteModel.Nombre;
            _pacienteDTO.ApellidoPaterno = pacienteModel.ApellidoPaterno;
            _pacienteDTO.ApellidoMaterno = pacienteModel.ApellidoMaterno;
            _pacienteDTO.FechaNacimiento = pacienteModel.FechaNacimiento;
            _pacienteDTO.Edad = pacienteModel.Edad;
            _pacienteDTO.Direccion = pacienteModel.Direccion;
            _pacienteDTO.IdComuna = selectedComuna.Id;
            _pacienteDTO.TelefonoContactoPrincipal = pacienteModel.TelefonoContactoPrincipal;
            _pacienteDTO.TelefonoContactoSecundario = pacienteModel.TelefonoContactoSecundario;
            _pacienteDTO.EmailContactoPrincipal = pacienteModel.EmailContactoPrincipal;
            _pacienteDTO.EmailContactoSecundario = pacienteModel.EmailContactoSecundario;
            _pacienteDTO.FechaIngreso = pacienteModel.FechaIngreso;
            _pacienteDTO.IdSexo = selectedSexo.Id;

            _pacienteDTO.ListadoAlergias = pacienteModel.ListaAlergiasSeleccionadas.Select(x => x.Id).ToList();
            _pacienteDTO.ListadoMedicamentosAlergia = pacienteModel.ListaMedicamentosAlergicosSeleccionados.Select(x => x.Id).ToList();

            if (pacienteModel.Foto != null) _pacienteDTO.FotoArchivo = _helper.ConvertirAArchivo(pacienteModel.Foto);

            var resultado = await _pacienteService.UpdateAsync(_pacienteDTO);
            if (resultado.IsSuccess)
            {
                await jsRuntime.InvokeVoidAsync("ShowSuccessAlert", "Datos del paciente guardados satisfactoriamente");
                await jsRuntime.InvokeVoidAsync("HideAlertConfirm");
                navigationManager.NavigateTo("Ficha/Paciente/IndexPaciente");
                return;
            }

            await jsRuntime.InvokeVoidAsync("ShowErrorAlert", "Hubo un error al guardar los datos del paciente");
            await jsRuntime.InvokeVoidAsync("HideAlertConfirm");
            return;
        }
    }

    private async Task<IEnumerable<DropDownDTO>> SearchItemsComuna(string searchText)
    {
        return await Task.FromResult(pacienteModel.ListaComunas.Where(x => x.Descripcion.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList());
    }
    private async Task<IEnumerable<DropDownDTO>> SearchItemsSexo(string searchText)
    {
        return await Task.FromResult(pacienteModel.ListaSexo.Where(x => x.Descripcion.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList());
    }

    private async Task<IEnumerable<DropDownDTO>> SearchItemsMedicamentos(string searchText)
    {
        return await Task.FromResult(pacienteModel.ListaMedicamentosAlergicos.Where(x => x.Descripcion.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList());
    }

    private async Task<IEnumerable<DropDownDTO>> SearchItemsAlergias(string searchText)
    {
        return await Task.FromResult(pacienteModel.ListaAlergias.Where(x => x.Descripcion.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList());
    }

    private void AgregarMedicamento()
    {
        if (selectedMedicamento != null &&
            !pacienteModel.ListaMedicamentosAlergicosSeleccionados.Any(m => m.Id == selectedMedicamento.Id))
        {
            pacienteModel.ListaMedicamentosAlergicosSeleccionados.Add(selectedMedicamento);
            pacienteModel.ListaMedicamentosAlergicos.Remove(selectedMedicamento);
            selectedMedicamento = null;
        }
    }

    private void EliminarMedicamento(DropDownDTO medicamento)
    {
        pacienteModel.ListaMedicamentosAlergicosSeleccionados.Remove(medicamento);
        pacienteModel.ListaMedicamentosAlergicos.Add(medicamento);
        pacienteModel.ListaMedicamentosAlergicos = pacienteModel.ListaMedicamentosAlergicos.OrderBy(x => x.Descripcion).ToList();
    }

    private void AgregarAlergia()
    {
        if (selectedAlergia != null &&
            !pacienteModel.ListaAlergiasSeleccionadas.Any(m => m.Id == selectedAlergia.Id))
        {
            pacienteModel.ListaAlergiasSeleccionadas.Add(selectedAlergia);
            pacienteModel.ListaAlergias.Remove(selectedAlergia);
            selectedAlergia = null;
        }
    }

    private void EliminarAlergia(DropDownDTO alergia)
    {
        pacienteModel.ListaAlergiasSeleccionadas.Remove(alergia);
        pacienteModel.ListaAlergias.Add(alergia);
        pacienteModel.ListaAlergias = pacienteModel.ListaAlergias.OrderBy(x => x.Descripcion).ToList();
    }

    private async Task IniciarCamara()
    {

        await jsRuntime.InvokeVoidAsync("startCamera");
        
        isDisabledBtn_CapturarFoto = false;

    }

    private async Task CapturarFoto()
    {
        var fotoBase64 = await jsRuntime.InvokeAsync<string>("takePhoto");
        pacienteModel.Foto = fotoBase64;
        isDisabledBtn_CapturarFoto = true;
        StateHasChanged();
    }


}